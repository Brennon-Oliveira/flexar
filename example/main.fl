import
    std,
    math,
    use List,
    io.File::readFile
    io.File::writeFile;

namespace main;

class Person {
    name: string
    age: int

    public Person(){}
    public Person(name: string, age: int){
        this.name = name
        this.age = age
    }

    static public func main(){
        person: Person = new Person("John", 20)
        person.presentation()
    }

    public func presentation(){
        this.sayHello()
        this.sayAge()
    }

    private func sayHello(){
        std::println(`Hello ${this.name}!`)
    }

    private func sayAge(){
        std::println(`I'm ${this.age} years old!`)
    }
}

func main(): int {
    print(integer)
    text: string
    std::printf("%s", text)

    Person::main()

    if (integer == 1){
        std::println("integer is 1")
    } elif (integer == 2){
        std::println("integer is 2")
    } else {
        std::println("integer is not 1 or 2")
    }

    for (i: int = 0; i < 10; i++){
        std::println(i)
    }

    arr: int[5] = {1,2,3,4,5}
    for (index, item in arr){
        if (index == 3){
            continue
        }
        std::println(`arr[${index}] = ${item}`)
    }

    while (true){
        std::println("Hello World!")
        break
    }

    do {
        std::println("Hello World!")
    } while (false)

    switch (integer){
        case 1:
            std::println("integer is 1")
        case 2:
            std::println("integer is 2")
        default:
            std::println("integer is not 1 or 2")
    }

    try {
        std::println("Hello World!")
    } catch (e: Exception){
        std::println(e)
    } finally {
        std::println("Hello World!")
    }

    try {
        std::println("Hello World!")
    } catch (e: Exception){
        std::println(e)
    }

    try {
        std::println("Hello World!")
    } finally {
        std::println("Hello World!")
    }

    return 0
}

func variables(){
    integer: int // 32bits
    integer8bits: int8 = 1
    integer16bits: int16 = 2
    integer32bits: int32 = 3
    integer64bits: int64 = 4
    unsignedInteger: uint = 5 // 32bits
    unsignedInteger8bits: uint8 = 6
    unsignedInteger16bits: uint16 = 7
    unsignedInteger32bits: uint32 = 8
    unsignedInteger64bits: uint64 = 9
    float: float // 32bits
    float32bits: float32 = 1.5f
    float64bits: float64 = math::PI
    boolean: bool
    character: char
    text: string
    textWith10: string[10]
    infereceNum: inf = 123
    arr: int[5] = {1,2,3,4,5}
    list: list = new List({1,2,3,4,5})
    setList = new Set({1,2,3,4,5})
    map: map = {"key1": "value1", "key2": "value2"}
    tuple: tuple[int(5)] = (1,2,3,4,5)
    tupleWithNames: tuple = (a: 1, b: 2, c: 3, d: 4, e: 5)
    person: Person = new Person("John", 20)
    person.sayHello()
    person2 := new Person{}

    // const
    const integer: int = 1
}

func gretting(name: char[size]){
    std::println(`Hello ${name}!`)
}
